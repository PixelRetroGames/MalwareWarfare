#include "player.h"

template <class Unit>
void Player<Unit>::Clear()
{
 id=0;
 for(int i=0;i<NUMBER_OF_UNITS;i++)
     unit[i].Clear();
 Destroy_Texture(player_image);
}

template <class Unit>
void Player<Unit>::Set_id(int _id)
{
 id=_id;
}

template <class Unit>
void Player<Unit>::Print_info_simple(int x,int y,Texture *_screen)
{
 Apply_Texture(x,y,MENU_BACKGROUND,_screen);
 Apply_Texture(x+(MENU_OPTION_BACKGROUND->w-player_image->w)/2,y+(_screen->h-NUMBER_OF_UNITS_ON_PAGE*MENU_OPTION_BACKGROUND->h-player_image->h)/2,player_image,_screen);
 for(int i=0;i<NUMBER_OF_UNITS_ON_PAGE;i++)
     unit[3-i].Print_in_menu(x,_screen->h-(i+1)*MENU_OPTION_BACKGROUND->h,_screen);
}

template <class Unit>
int Player<Unit>::Get_id()
{
 return id;
}

template <class Unit>
Unit *Player<Unit>::Get_unit(int _id)
{
 return &unit[_id];
}

const int EVENT_DELAY=100;
const SDL_Scancode keys[2][NUMBER_OF_UNITS_ON_PAGE]={{SDL_SCANCODE_1,SDL_SCANCODE_2,SDL_SCANCODE_3,SDL_SCANCODE_4},{SDL_SCANCODE_U,SDL_SCANCODE_I,SDL_SCANCODE_O,SDL_SCANCODE_P}};

template <class Unit>
int Player<Unit>::Handle_Events()
{
 if(event_timer.get_ticks()<EVENT_DELAY)
    return -1;
 for(int i=0;i<NUMBER_OF_UNITS_ON_PAGE;i++)
     {
      if((controller[id].Get_Button_State(i+1) || keystates[keys[id-1][i]]) && Can_cast(i))
         {
          unit[i].Start_cooldown();
          return i;
         }
     }
 return -1;
}

template <class Unit>
void Player<Unit>::Update_units_frames()
{
 for(int i=0;i<NUMBER_OF_UNITS;i++)
     unit[i].Update_frame();
}

