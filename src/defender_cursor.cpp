#include "defender_cursor.h"

void Defender_Cursor::Load(char *path_to_image,SDL_Rect _constraints)
{
 image=Load_Transparent_Texture(path_to_image);
 constraints=_constraints;
 x=constraints.x+constraints.w/2;
 y=constraints.y+constraints.h/2;
}

void Defender_Cursor::Clear()
{
 Destroy_Texture(image);
}

const int DEAD_ZONE=16000;

void Defender_Cursor::Update(Game_Controller *_controller)
{
 int sx=_controller->Get_LeftStickX(),sy=_controller->Get_LeftStickY();
 if(sx<-DEAD_ZONE)
    {
     if(sx+DEAD_ZONE>-10000)
        x+=(sx+DEAD_ZONE)/5000;
     else
        x+=(sx+DEAD_ZONE)/1000;
    }
 if(sx>DEAD_ZONE)
    {
     if(sx-DEAD_ZONE<10000)
        x+=(sx+DEAD_ZONE)/5000;
     else
        x+=(sx-DEAD_ZONE)/1000;
    }
 if(sy<-DEAD_ZONE)
    {
     if(sy+DEAD_ZONE>-10000)
        y+=(sy+DEAD_ZONE)/5000;
     else
        y+=(sy+DEAD_ZONE)/1000;
    }
 if(sy>DEAD_ZONE)
    {
     if(sy-DEAD_ZONE<10000)
        y+=(sy+DEAD_ZONE)/5000;
     else
        y+=(sy-DEAD_ZONE)/1000;
    }
 x=std::max(x,constraints.x);
 x=std::min(x,constraints.x+constraints.w);
 y=std::max(y,constraints.y);
 y=std::min(y,constraints.y+constraints.h);
}

void Defender_Cursor::Print(Texture *_screen)
{
 Apply_Texture(x,y,image,_screen);
}
