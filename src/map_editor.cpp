#include "map_editor.h"

void Map_Editor::Clear()
{
 map.Clear();
 cpu.Clear();
 Destroy_Texture(tiles_highlighter);
}

void Map_Editor::Set_filename(char *_filename)
{
 strcpy(filename,_filename);
}

void Map_Editor::Load()
{
 Load_level_images();
 map.Load(filename);
 map.Set_same_color();
 cpu.Load();
 Texture *tile_highlight=Load_Transparent_Texture("res/images/tile_highlight.png");
 tiles_highlighter=Create_Transparent_Texture(map.Get_size()*tile_highlight->w,map.Get_size()*tile_highlight->h);
 for(int i=0;i<map.Get_size();i++)
     for(int j=0;j<map.Get_size();j++)
         {
          Apply_Texture(i*tile_highlight->w,j*tile_highlight->h,tile_highlight,tiles_highlighter);
         }
 Destroy_Texture(tile_highlight);
}

void Map_Editor::Save()
{
 map.Save(filename);
 Clear();
}

void Map_Editor::Print(Texture *_screen)
{
 Apply_Texture(0,0,LEVEL_BACKGROUND,_screen);
 buffer=Create_Transparent_Texture(tiles_highlighter->w,tiles_highlighter->h);
 map.Print(buffer,0,0);
 Apply_Texture(0,0,tiles_highlighter,buffer);
 //Flip_Buffers(_screen);
 Apply_Texture({0,0,tiles_highlighter->w,tiles_highlighter->h},buffer,
               {MENU_OPTION_BACKGROUND->w,0,ARENA_DEFAULT_SIZE*PIXELS_PER_INGAME_UNIT,ARENA_DEFAULT_SIZE*PIXELS_PER_INGAME_UNIT},_screen);
 cpu.Set_health(CPU_HEALTH);
 cpu.Set_screen_pos(CPU_POSITION.x,CPU_POSITION.y);
 cpu.Set_map_pos(FLOW_START_POS.x,FLOW_START_POS.y);
 cpu.Print(MENU_OPTION_BACKGROUND->w,0,_screen);
 Destroy_Texture(buffer);
}

void Map_Editor::Handle_Events(SDL_Event *event)
{
 std::pair<int,int> cursor_pos_on_screen;
 std::pair<int,int> cursor_pos;
 cursor_pos_on_screen.first=(event->button.x/RATIO_W-MENU_OPTION_BACKGROUND->w)*ARENA_RATIO;
 cursor_pos_on_screen.second=(event->button.y/RATIO_H)*ARENA_RATIO;
 if((cursor_pos_on_screen.second)/PIXELS_PER_INGAME_UNIT>=0 && (cursor_pos_on_screen.second)/PIXELS_PER_INGAME_UNIT<ARENA_SIZE &&
    (cursor_pos_on_screen.first)/PIXELS_PER_INGAME_UNIT>=0 && (cursor_pos_on_screen.first)/PIXELS_PER_INGAME_UNIT<ARENA_SIZE)
     {
      cursor_pos.second=(cursor_pos_on_screen.first)/PIXELS_PER_INGAME_UNIT;
      cursor_pos.first=(cursor_pos_on_screen.second)/PIXELS_PER_INGAME_UNIT;
     }
 if(event->type==SDL_MOUSEBUTTONDOWN)
    {
     pressed=true;
     last_button_draw=(event->button.button==SDL_BUTTON_LEFT);
     last_button_erase=(event->button.button==SDL_BUTTON_RIGHT);
    }
 if(event->type==SDL_MOUSEBUTTONUP)
    {
     pressed=false;
    }
 if(pressed)
    {
     if(last_button_draw)
        map.Set_tile(cursor_pos.first,cursor_pos.second,true),updated=true;
     if(last_button_erase)
        map.Set_tile(cursor_pos.first,cursor_pos.second,false),updated=true;
    }
 if(updated)
    map.Configure();
}

void Map_Editor::Start(Texture *_screen)
{
 bool quit=false;
 SDL_Event event;
 while(!quit)
       {
        SDL_PollEvent(&event);
        quit=(controller[1].Pressed_Back_button() || controller[2].Pressed_Back_button()) || keystates[SDL_SCANCODE_ESCAPE];
        quit=(quit || event.type==SDL_QUIT);
        Handle_Events(&event);
        Print(_screen);
        Flip_Buffers(_screen);
       }
 Clear_level_images();
}

