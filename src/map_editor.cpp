#include "map_editor.h"

void Map_Editor::Set_filename(char *_filename)
{
 strcpy(filename,_filename);
}

void Map_Editor::Load()
{
 map.Load(filename);
 Texture *tile_highlight=Load_Transparent_Texture("res/images/tile_highlight.png");
 tiles_highlighter=Create_Transparent_Texture(map.Get_size()*tile_highlight->w,map.Get_size()*tile_highlight->h);
 for(int i=0;i<map.Get_size();i++)
     for(int j=0;j<map.Get_size();j++)
         {
          Apply_Texture(i*tile_highlight->w,j*tile_highlight->h,tile_highlight,tiles_highlighter);
         }
 Destroy_Texture(tile_highlight);
}

void Map_Editor::Save()
{
 map.Save(filename);
 Destroy_Texture(tiles_highlighter);
}

void Map_Editor::Print(Texture *_screen)
{
 buffer=Create_Transparent_Texture(tiles_highlighter->w,tiles_highlighter->h);
 map.Print(buffer,0,0);
 Apply_Texture(0,0,tiles_highlighter,buffer);
 Apply_Stretched_Texture({0,0,tiles_highlighter->w,tiles_highlighter->h},tiles_highlighter,
                         {0,0,_screen->w,_screen->h},_screen);
 Destroy_Texture(buffer);
}

void Map_Editor::Start(Texture *_screen)
{
 bool quit=false;
 SDL_Event event;
 while(!quit)
       {
        quit=(controller[1].Pressed_Back_button() || controller[2].Pressed_Back_button()) || keystates[SDL_SCANCODE_ESCAPE];
        quit=(quit || event->type==SDL_QUIT);
        Handle_Events(&event);
        Print(_screen);
        Flip_Buffers(_screen);
       }
}

