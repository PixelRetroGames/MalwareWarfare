#include "unit_animation.h"

void Unit_animation::Init(int _number_of_frames,std::vector<int> *_frames_durations)
{
 number_of_frames=_number_of_frames;
 frames_durations=_frames_durations;
 total_duration=0;
 for(int i=0;i<frames_durations->size();i++)
     total_duration+=(*frames_durations)[i];
 timer.start();
}

void Unit_animation::Clear()
{
 number_of_frames=1;
 current_frame=0;
}

int Unit_animation::Get_number_of_frames()
{
 return number_of_frames;
}

int Unit_animation::Get_current_frame()
{
 return current_frame;
}

void Unit_animation::Update_frame()
{
 int n=frames_durations->size();
 if(timer.get_ticks()>(*frames_durations)[current_frame])
    {
     current_frame++;
     current_frame%=number_of_frames;
     timer.start();
    }
}

int Unit_animation::Get_total_duration()
{
 return total_duration;
}

void Unit_animation_global::Load(char *filename)
{
 image=Load_Transparent_Texture(filename);
 Load_animation(filename);
}

void Unit_animation_global::Set_image(Texture *_image)
{
 image=_image;
}

void Unit_animation_global::Load_animation(char *filename)
{
 int n=strlen(filename)-1;
 while(filename[n]!='.')
       n--;
 char aux[TEXT_LENGTH_MAX]={NULL};
 strcpy(aux,filename);
 aux[n]=NULL;
 strcat(aux,".anim");
 FILE *in=fopen(aux,"r");
 int _number_of_frames;
 std::vector<int> *frames_durations;
 frames_durations=new std::vector<int>;
 fscanf(in,"%d ",&_number_of_frames);
 for(int i=0;i<_number_of_frames;i++)
     {
      int x;
      fscanf(in,"%d ",&x);
      (*frames_durations).push_back(x);
     }
 fclose(in);
 animation.Init(_number_of_frames,frames_durations);
}

void Unit_animation_global::Set_animation(int _number_of_frames,std::vector<int> *_frames_durations)
{
 animation.Init(_number_of_frames,_frames_durations);
}

Texture *Unit_animation_global::Get_image()
{
 return image;
}

Unit_animation *Unit_animation_global::Get_unit_animation()
{
 return &animation;
}

void Unit_animation_global::Clear()
{
 Destroy_Texture(image);
 animation.Clear();
}
