#include "combat_unit.h"

const int STATE_IDLE=0,STATE_ATTACKING=1,STATE_DYING=2,STATE_WALKING=3;

Combat_unit::Combat_unit()
{
 for(int i=0;i<4;i++)
     animations[i].Set_image(NULL);
 menu_image.Set_image(NULL);
 menu_description=NULL;
}

void Combat_unit::Reset()
{
 is_cool=true;
}

void Combat_unit::Clear_images()
{
 for(int i=0;i<4;i++)
     animations[i].Clear();
 menu_image.Clear();
 Destroy_Texture(menu_description);
 id=-1;
 number_of_frames=1;
 current_frame=0;
}

void Combat_unit::Start_cooldown()
{
 is_cool=false;
 cooldown_timer.start();
}

bool Combat_unit::Is_cool()
{
 if(!is_cool)
    {
     if(first_cooldown)
        {
         is_cool=(first_cooldown*1000-cooldown_timer.get_ticks()<=0);
         if(is_cool)
            first_cooldown=0;
        }
     else
        is_cool=(cooldown_time*1000-cooldown_timer.get_ticks()<=0);
    }
 return is_cool;
}

bool Combat_unit::Is_enough_ram(int ram)
{
 return ram_cost<ram;
}

void Combat_unit::Set_first_cooldown(int _cooldown)
{
 first_cooldown=_cooldown;
 Start_cooldown();
}

void Combat_unit::Print(int _frame,int x,int y,int angle,int state,Texture *_screen)
{
 Apply_Rotated_Texture(animations[state].Get_image(),{_frame*PIXELS_PER_INGAME_UNIT,0,PIXELS_PER_INGAME_UNIT,PIXELS_PER_INGAME_UNIT},
                       _screen,{x,y,PIXELS_PER_INGAME_UNIT,PIXELS_PER_INGAME_UNIT},angle);
}

void Combat_unit::Print_in_menu(int x,int y,Texture *_screen,int ram)
{
 Apply_Texture(x,y,MENU_OPTION_BACKGROUND,_screen);
 Apply_Texture(current_frame*2*PIXELS_PER_INGAME_UNIT<menu_image.Get_image()->w?menu_image.Get_unit_animation()->Get_current_frame()*2*PIXELS_PER_INGAME_UNIT:menu_image.Get_unit_animation()->Get_current_frame()*2*PIXELS_PER_INGAME_UNIT%menu_image.Get_image()->w,0,x+5,y+(MENU_OPTION_BACKGROUND->h-2*PIXELS_PER_INGAME_UNIT)/2,2*PIXELS_PER_INGAME_UNIT,2*PIXELS_PER_INGAME_UNIT,menu_image.Get_image(),_screen);
 Apply_Texture(x+5+2*PIXELS_PER_INGAME_UNIT+(MENU_OPTION_BACKGROUND->w-(5+2*PIXELS_PER_INGAME_UNIT)-menu_description->w)/2,y+(MENU_OPTION_BACKGROUND->h-menu_description->h-MENU_CONTROLLER_KEYS[id%4]->h)/2+5,menu_description,_screen);
 Apply_Texture(x+5+2*PIXELS_PER_INGAME_UNIT+(MENU_OPTION_BACKGROUND->w-(5+2*PIXELS_PER_INGAME_UNIT)-MENU_CONTROLLER_KEYS[id%4]->w)/2,y+MENU_OPTION_BACKGROUND->h-MENU_CONTROLLER_KEYS[id%4]->h,MENU_CONTROLLER_KEYS[id%4],_screen);
 if(ram_cost>ram)
    {
     Apply_Texture(x,y,MENU_OPTION_COOLING,_screen);
     /*char aux[TEXT_LENGTH_MAX];
     if(first_cooldown==0)
        itoa(cooldown_time-cooldown_timer.get_ticks()/1000,aux);
     else
        itoa(first_cooldown-cooldown_timer.get_ticks()/1000,aux);
     Texture *cooldown_counter=Create_TTF_Texture(MENU_FONT_BIG,aux,VIRUS_COOLDOWN_COUNTER_COLOR);
     Apply_Texture(x+(MENU_OPTION_BACKGROUND->w-cooldown_counter->w)/2,y+(MENU_OPTION_BACKGROUND->h-cooldown_counter->h)/2,cooldown_counter,_screen);
     Destroy_Texture(cooldown_counter);*/
     char aux[TEXT_LENGTH_MAX];
     itoa(std::max(ram_cost-ram,0),aux);
     Texture *cooldown_counter=Create_TTF_Texture(MENU_FONT_BIG,aux,VIRUS_COOLDOWN_COUNTER_COLOR);
     Apply_Texture(x+(MENU_OPTION_BACKGROUND->w-cooldown_counter->w)/2,y+(MENU_OPTION_BACKGROUND->h-cooldown_counter->h)/2,cooldown_counter,_screen);
     Destroy_Texture(cooldown_counter);
    }
 else
    if(!Is_cool())
       {
        Apply_Texture(x,y,MENU_OPTION_COOLING,_screen);
       }
}

void Combat_unit::Update_frame()
{
 menu_image.Get_unit_animation()->Update_frame();
}

int Combat_unit::Get_id()
{
 return id;
}

int Combat_unit::Get_phase_change_delay()
{
 return phase_change_delay;
}

int Combat_unit::Get_ram_cost()
{
 return ram_cost;
}

int Combat_unit::Get_damage()
{
 return 0;
}

int Combat_unit::Get_health()
{
 return 1;
}

int Combat_unit::Get_radius()
{
 return 0;
}

int Combat_unit::Get_attack_delay()
{
 return 0;
}

Unit_animation Combat_unit::Get_animation(int id)
{
 return *animations[id].Get_unit_animation();
}

int Combat_unit::Get_range()
{
}

int Combat_unit::Get_spawn_delay()
{
}

int Combat_unit::Get_ram_reward()
{
}

int Combat_unit::Get_shield_health()
{
}

int Combat_unit::Get_stun_time()
{
}

int Combat_unit::Get_activation_time()
{
}

int Combat_unit::Get_slow_time()
{

}
