#include "defender.h"

const int NUMBER_OF_FIREWALL_TYPES=4;
const char *FIREWALL_TYPES[]={"firewall","antivirus scanner","firewall plus","security service"};

int Defender::Get_type(char *type)
{
 for(int i=0;i<NUMBER_OF_FIREWALL_TYPES;i++)
     if(strcmp(type,FIREWALL_TYPES[i])==0)
        return i;
 SDL_ShowSimpleMessageBox(SDL_MESSAGEBOX_ERROR,"Invalid firewall type",type,NULL);
 exit(-1);
}

char PATH_TO_ALL_FIREWALLS[]={"res/firewall/all.mwafw"};

void Defender::Load(int _id)
{
 Set_id(_id);
 FILE *in=fopen(PATH_TO_ALL_FIREWALLS,"r");
 for(int i=0;i<4;i++)
     {
      char path[TEXT_LENGTH_MAX];
      fgets(path,sizeof path,in);
      int sq=strlen(path);
      if(path[sq-1]=='\n')
         path[sq-1]=NULL;

      char type[TEXT_LENGTH_MAX];
      fgets(type,sizeof type,in);
      sq=strlen(type);
      if(type[sq-1]=='\n')
         type[sq-1]=NULL;

      Firewall *aux;
      switch(Get_type(type))
             {
              case 0: aux=new Firewall;
                      break;
              case 1: aux=new Antivirus_scanner;
                      break;
              case 2: aux=new Firewall_plus;
                      break;
              case 3: aux=new Security_service;
                      break;
             };
      aux->Load(path,i);
      unit.push_back(aux);
     }
 fclose(in);
 char aux[TEXT_LENGTH_MAX];
 strcpy(aux,"P");
 strcat(aux,_id==1?"1":"2");
 strcat(aux," - defender");
 player_image=Create_TTF_Texture(MENU_FONT_BIG,aux,DEFENDER_ID_COLOR);
 event_timer.start();
 Set_total_ram(INITIAL_TOTAL_RAM);
}

void Defender::Reset()
{
 used_ram=0;
 Set_total_ram(INITIAL_TOTAL_RAM);
}

void Defender::Clear()
{
 Player::Clear();
 used_ram=total_ram=0;
 Destroy_Texture(ram_image);
 ram_image=NULL;
}

Firewall *Defender::Get_firewall(int _id)
{
 return Get_unit(_id);
}

std::pair<int,int> Defender::Get_cursor_position()
{
 return cursor_pos;
}

void Defender::Set_available_cursor_position(std::pair<int,int> _pos,bool _val)
{
 available_cursor_positions[_pos.first][_pos.second]=_val;
}

bool Defender::Can_cast(int _id)
{
 return unit[_id]->Get_ram_cost()<=(total_ram-used_ram);
}

int Defender::Handle_Events(int x,int y,SDL_Event *event)
{
 if(event->type==SDL_MOUSEMOTION)
    {
     cursor_pos_on_screen.first=event->button.x;
     cursor_pos_on_screen.second=event->button.y;
     if((cursor_pos_on_screen.second-y)/PIXELS_PER_INGAME_UNIT>=0 && (cursor_pos_on_screen.second-y)/PIXELS_PER_INGAME_UNIT<ARENA_SIZE &&
        (cursor_pos_on_screen.first-x)/PIXELS_PER_INGAME_UNIT>=0 && (cursor_pos_on_screen.first-x)/PIXELS_PER_INGAME_UNIT<ARENA_SIZE &&
        available_cursor_positions[(cursor_pos_on_screen.second-y)/PIXELS_PER_INGAME_UNIT][(cursor_pos_on_screen.first-x)/PIXELS_PER_INGAME_UNIT])
        {
         cursor_pos.second=(cursor_pos_on_screen.first-x)/PIXELS_PER_INGAME_UNIT;
         cursor_pos.first=(cursor_pos_on_screen.second-y)/PIXELS_PER_INGAME_UNIT;
        }
     else
        {
         cursor_pos={-1,-1};
        }
    }
 else
    {
     if(!available_cursor_positions[cursor_pos.first][cursor_pos.second])
        {
         cursor_pos={-1,-1};
        }
     else
        {
         cursor_pos.second=(cursor_pos_on_screen.first-x)/PIXELS_PER_INGAME_UNIT;
         cursor_pos.first=(cursor_pos_on_screen.second-y)/PIXELS_PER_INGAME_UNIT;
        }
    }

 int ret=Player::Handle_Events();
 if(ret!=-1)
    {
     if(available_cursor_positions[cursor_pos.first][cursor_pos.second])
        {
         Set_used_ram(used_ram+unit[ret]->Get_ram_cost());
         available_cursor_positions[cursor_pos.first][cursor_pos.second]=false;
        }
     else
        return -1;
    }
 return ret;
}

void Defender::Set_used_ram(int _used_ram)
{
 used_ram=_used_ram;
 Update_ram_image();
}

void Defender::Set_total_ram(int _total_ram)
{
 total_ram=std::min(_total_ram,MAXIMUM_RAM);
 Update_ram_image();
}

void Defender::Add_to_total_ram(int _ram)
{
 total_ram+=_ram;
 total_ram=std::min(total_ram,MAXIMUM_RAM);
 Update_ram_image();
}

void Defender::Update_ram_image()
{
 if(ram_image!=NULL)
    Destroy_Texture(ram_image);
 char aux[TEXT_LENGTH_MAX],aux1[TEXT_LENGTH_MAX];
 itoa(used_ram,aux1);
 strcpy(aux,"RAM: ");
 strcat(aux,aux1);
 strcat(aux,"/");
 itoa(total_ram,aux1);
 strcat(aux,aux1);
 ram_image=Create_TTF_Texture(MENU_FONT_BIG,aux,RAM_COLOR);
}

void Defender::Print_info(int x,int y,Texture *_screen)
{
 Apply_Texture(x,y,MENU_BACKGROUND_DEFENDER,_screen);
 for(int i=0;i<NUMBER_OF_UNITS_ON_PAGE;i++)
     unit[3-i]->Print_in_menu(x,_screen->h-(i+1)*MENU_OPTION_BACKGROUND->h,_screen,total_ram-used_ram);
 Apply_Texture(x+(MENU_OPTION_BACKGROUND->w-player_image->w)/2,y+(_screen->h-NUMBER_OF_UNITS_ON_PAGE*MENU_OPTION_BACKGROUND->h-player_image->h-ram_image->h)/2,player_image,_screen);
 Apply_Texture(x+(MENU_OPTION_BACKGROUND->w-ram_image->w)/2,y+(_screen->h-NUMBER_OF_UNITS_ON_PAGE*MENU_OPTION_BACKGROUND->h-player_image->h-ram_image->h)/2+player_image->h,ram_image,_screen);
 Texture *temp;
 char aux[TEXT_LENGTH_MAX]={NULL},aux1[TEXT_LENGTH_MAX]={NULL};
 itoa(cursor_pos.first,aux1);
 strcat(aux,aux1);
 strcat(aux,", ");
 itoa(cursor_pos.second,aux1);
 strcat(aux,aux1);
 temp=Create_TTF_Texture(MENU_FONT_SMALL,aux,{255,255,255});
 Apply_Texture(_screen->w-temp->w,0,temp,_screen);
 Destroy_Texture(temp);
}
