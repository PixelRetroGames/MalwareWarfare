#include "defender.h"

char PATH_TO_ALL_FIREWALLS[]={"res/firewall/all.mwafw"};

void Defender::Load(int _id)
{
 Set_id(_id);
 FILE *in=fopen(PATH_TO_ALL_FIREWALLS,"r");
 for(int i=0;i<4;i++)
     {
      char aux[TEXT_LENGTH_MAX];
      fgets(aux,sizeof aux,in);
      int sq=strlen(aux);
      if(aux[sq-1]=='\n')
         aux[sq-1]=NULL;
      unit[i].Load(aux,i);
     }
 fclose(in);
 char aux[TEXT_LENGTH_MAX];
 strcpy(aux,"P");
 strcat(aux,_id==1?"1":"2");
 strcat(aux," - defender");
 player_image=Create_TTF_Texture(MENU_FONT_BIG,aux,DEFENDER_ID_COLOR);
 event_timer.start();
 Set_total_ram(INITIAL_TOTAL_RAM);
}

void Defender::Reset()
{
 used_ram=0;
 Set_total_ram(INITIAL_TOTAL_RAM);
}

void Defender::Clear()
{
 Player::Clear();
 used_ram=total_ram=0;
 Destroy_Texture(ram_image);
 ram_image=NULL;
}

Firewall *Defender::Get_firewall(int _id)
{
 return Get_unit(_id);
}

bool Defender::Can_cast(int _id)
{
 return unit[_id].Get_ram_cost()<=(total_ram-used_ram);
}

int Defender::Handle_Events()
{
 int ret=Player::Handle_Events();
 if(ret!=-1)
    Set_used_ram(used_ram+unit[ret].Get_ram_cost());
 return ret;
}

void Defender::Set_used_ram(int _used_ram)
{
 used_ram=_used_ram;
 Update_ram_image();
}

void Defender::Set_total_ram(int _total_ram)
{
 total_ram=std::min(_total_ram,MAXIMUM_RAM);
 Update_ram_image();
}

void Defender::Add_to_total_ram(int _ram)
{
 total_ram+=_ram;
 total_ram=std::min(total_ram,MAXIMUM_RAM);
 Update_ram_image();
}

void Defender::Update_ram_image()
{
 if(ram_image!=NULL)
    Destroy_Texture(ram_image);
 char aux[TEXT_LENGTH_MAX],aux1[TEXT_LENGTH_MAX];
 itoa(used_ram,aux1);
 strcpy(aux,"RAM: ");
 strcat(aux,aux1);
 strcat(aux,"/");
 itoa(total_ram,aux1);
 strcat(aux,aux1);
 ram_image=Create_TTF_Texture(MENU_FONT_BIG,aux,RAM_COLOR);
}

void Defender::Print_info(int x,int y,Texture *_screen)
{
 Apply_Texture(x,y,MENU_BACKGROUND_DEFENDER,_screen);
 Player::Print_info(x,y,_screen);
 Apply_Texture(x+(MENU_OPTION_BACKGROUND->w-player_image->w)/2,y+(_screen->h-NUMBER_OF_UNITS_ON_PAGE*MENU_OPTION_BACKGROUND->h-player_image->h-ram_image->h)/2,player_image,_screen);
 Apply_Texture(x+(MENU_OPTION_BACKGROUND->w-ram_image->w)/2,y+(_screen->h-NUMBER_OF_UNITS_ON_PAGE*MENU_OPTION_BACKGROUND->h-player_image->h-ram_image->h)/2+player_image->h,ram_image,_screen);
}
