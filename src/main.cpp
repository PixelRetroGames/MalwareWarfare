#include "settings.h"
#include "level.h"
#include "virus.h"
#include "menu.h"
#include "map_editor.h"

#include <cstdio>
#include <ctime>
#include <cstdlib>

Texture *screen;

int main( int argc, char *args[] )
{
 ///Random
 srand((unsigned int)(time(NULL)));
 ///Random
 if(SDL_Init(SDL_INIT_EVERYTHING)<0)
    {
     FILE *log_file=fopen("err/logs.txt","w");
     fprintf(log_file,"SDL_Init() failed : %s ",SDL_GetError());
     fclose(log_file);
     char message[TEXT_LENGTH_MAX];
     strcpy(message,"SDL_Init() failed : ");
     strcat(message,SDL_GetError());
     SDL_ShowSimpleMessageBox(SDL_MESSAGEBOX_ERROR,"SDL failure",message,NULL);
     exit(-1);
    }
 if(TTF_Init()==-1)
    {
     FILE *log_file=fopen("err/logs.txt","w");
     fprintf(log_file,"TTF_Init() failed : %s ",TTF_GetError());
     fclose(log_file);
     char message[TEXT_LENGTH_MAX];
     strcpy(message,"TTF_Init() failed : ");
     strcat(message,SDL_GetError());
     SDL_ShowSimpleMessageBox(SDL_MESSAGEBOX_ERROR,"SDL_TTF module failure",message,NULL);
     exit(-2);
    }
 MUSIC_MODULE_INIT=true;
 if(Mix_Init(MIX_INIT_MP3)&(MIX_INIT_MP3)!=MIX_INIT_MP3)
    {
     MUSIC_MODULE_INIT=false;
     FILE *log_file=fopen("err/logs.txt","w");
     fprintf(log_file,"Mix_Init() failed : %s ",Mix_GetError());
     fclose(log_file);
     char message[TEXT_LENGTH_MAX];
     strcpy(message,"Mix_Init() failed : ");
     strcat(message,SDL_GetError());
     SDL_ShowSimpleMessageBox(SDL_MESSAGEBOX_ERROR,"SDL_mixer module failure",message,NULL);
    }
 Load_Settings();
 Open_Window_and_Renderer(RESOLUTION_W,RESOLUTION_H,DISPLAY_MODE);
 last_frame=Create_Transparent_Texture(RESOLUTION_W,RESOLUTION_H);
 screen=Create_Transparent_Texture(BASIC_SCREEN_RESOLUTION_W,BASIC_SCREEN_RESOLUTION_H);
 SCREEN=screen;
 REAL_SCREEN=new Texture;
 REAL_SCREEN->image=NULL;
 REAL_SCREEN->w=RESOLUTION_W;
 REAL_SCREEN->h=RESOLUTION_H;
 if(screen==NULL)
    {
     FILE *log_file=fopen("err/logs.txt","w");
     fprintf(log_file,"Open_Window_and_Renderer failed : %s ",SDL_GetError());
     fclose(log_file);
     char message[TEXT_LENGTH_MAX];
     strcpy(message,"Open_Window_and_Renderer failed : ");
     strcat(message,SDL_GetError());
     SDL_ShowSimpleMessageBox(SDL_MESSAGEBOX_ERROR,"SDL video module failure",message,NULL);
     exit(-1);
    }
 MUSIC_MODULE_INIT=true;
 if(Mix_OpenAudio(22050,MIX_DEFAULT_FORMAT,2,4096)==-1)
    {
     MUSIC_MODULE_INIT=false;
     FILE *log_file=fopen("err/logs.txt","w");
     fprintf(log_file,"Mix_OpenAudio failed : %s ",Mix_GetError());
     fclose(log_file);
     char message[TEXT_LENGTH_MAX];
     strcpy(message,"Mix_OpenAudio() failed : ");
     strcat(message,Mix_GetError());
     SDL_ShowSimpleMessageBox(SDL_MESSAGEBOX_ERROR,"SDL_mixer module failure",message,NULL);
    }
 if(MUSIC_MODULE_INIT)
    {
     Mix_Volume(-1,MIX_MAX_VOLUME*VOLUME/100);
     Mix_VolumeMusic(std::max(MIX_MAX_VOLUME*VOLUME-30,0)/100);
    }
 //static_screen=screen;

 Init_Controllers();
 Load_menu_images();
 Load_constants();
 Level game;
 Menu main_menu,play_menu,editor_menu;
 main_menu.Load("res/menu/menu.txt");
 play_menu.Load("res/menu/play.txt");
 editor_menu.Load("res/menu/editor.txt");
 Load_sounds();
 Mix_PlayMusic(MENU_MUSIC,-1);
 int option=-1;
 Texture *aux;
 SDL_Event event;
 while(option!=-2)
       {
        option=main_menu.Start(screen);
        switch(option)
               {
                case -2:{return 0;};
                case -1:{break;};
                case 0:{
                        while(option!=-2)
                              {
                               option=play_menu.Start(screen);
                               switch(option)
                                      {
                                       case -2:{return 0;};
                                       case -1:{break;};
                                       case 0:{
                                               Mix_HaltMusic();
                                               game.Start(screen,"res/test.txt");
                                               Mix_PlayMusic(MENU_MUSIC,-1);
                                               break;
                                              }
                                       case 1:{
                                               Mix_HaltMusic();
                                               game.Start(screen,"res/maps/new.txt");
                                               Mix_PlayMusic(MENU_MUSIC,-1);
                                               break;
                                              };
                                       case 2:{option=-2;break;};
                                      }
                               }
                        option=0;
                        while(SDL_PollEvent(NULL));
                        /*Run the game*/break;};
                case 1:{
                        aux=Load_Transparent_Texture("res/images/tutorial.png");
                        Apply_Stretched_Texture(0,0,screen->w,screen->h,aux,screen);
                        Destroy_Texture(aux);
                        Flip_Buffers(screen);
                        SDL_Delay(400);
                        Update_Controllers_Events();
                        while(SDL_PollEvent(&event));
                        Update_Controllers_Events();
                        while(event.type!=SDL_KEYDOWN && event.type!=SDL_MOUSEBUTTONDOWN && !controller[1].Pressed_Any_Button() && !controller[2].Pressed_Any_Button())
                              {
                               SDL_PollEvent(&event);
                               Update_Controllers_Events();
                              }
                        break;
                       };
                case 2:{Load_settings_images();
                        Graphic_Settings(screen);
                        Save_Settings();
                        //LAUNCHER_BBACKGROUND.Load();
                        main_menu.Clear();
                        main_menu.Load("res/menu/menu.txt");
                        if(MUSIC_MODULE_INIT)
                           {
                            Mix_Volume(-1,MIX_MAX_VOLUME*VOLUME/100);
                            Mix_VolumeMusic(std::max(MIX_MAX_VOLUME*VOLUME-30,0)/100);
                           }
                        Clear_settings_images();
                        break;
                       };
                case 3:{
                        Map_Editor test;
                        while(option!=-2)
                              {
                               option=editor_menu.Start(screen);
                               switch(option)
                                      {
                                       case -2:{return 0;};
                                       case -1:{break;};
                                       case 0:{
                                               test.Set_filename("res/maps/new.txt");
                                               test.Load();
                                               test.Start(true,screen);
                                               test.Save();
                                               break;
                                              }
                                       case 1:{
                                               test.Set_filename("res/maps/new.txt");
                                               test.Load();
                                               test.Start(false,screen);
                                               test.Save();
                                               break;
                                              };
                                       case 2:{option=-2;break;};
                                      }
                               }
                        option=0;
                        while(SDL_PollEvent(NULL));
                        /*Run the game*/break;};
                case 4:{
                        option=-2;
                        break;
                       };
               }
       }
 Clear_sounds();
 return 0;
}
