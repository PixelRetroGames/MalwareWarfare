#include "field_unit.h"
#include <typeinfo>
#include <type_traits>

const int angles[]={-90,0,90,180};
const int dirx[]={0,1,0,-1};
const int diry[]={1,0,-1,0};
const int ANIMATION_SMOOTHNESS=8,HP_HEIGHT=4;

void Field_unit::Print(int x,int y,Texture *_screen)
{
 if((map_x==0 || map_y==0 || map_x==ARENA_SIZE-1 || map_y==ARENA_SIZE-1) && Is_virus())
    phase=ANIMATION_SMOOTHNESS;
 int hp=unit->Get_health();
 if(typeid(*unit)==typeid(Malware_defender))
    hp+=unit->Get_shield_health();
 if(state==STATE_WALKING)
    {
     unit->Print(taking_damage,
                 animation.Get_current_frame(),
                 x+(map_y-diry[angle])*PIXELS_PER_INGAME_UNIT+diry[angle]*(PIXELS_PER_INGAME_UNIT/ANIMATION_SMOOTHNESS*phase),
                 y+(map_x-dirx[angle])*PIXELS_PER_INGAME_UNIT+dirx[angle]*(PIXELS_PER_INGAME_UNIT/ANIMATION_SMOOTHNESS*phase),
                 angles[angle],state,_screen);
     Apply_Stretched_Texture(x+(map_y-diry[angle])*PIXELS_PER_INGAME_UNIT+diry[angle]*(PIXELS_PER_INGAME_UNIT/ANIMATION_SMOOTHNESS*phase),
                             y+(map_x-dirx[angle])*PIXELS_PER_INGAME_UNIT+dirx[angle]*(PIXELS_PER_INGAME_UNIT/ANIMATION_SMOOTHNESS*phase),
                             PIXELS_PER_INGAME_UNIT*(hp-damage_taken)/hp,HP_HEIGHT,PLAYER_HP_IMAGE,_screen);
     Apply_Texture(x+(map_y-diry[angle])*PIXELS_PER_INGAME_UNIT+diry[angle]*(PIXELS_PER_INGAME_UNIT/ANIMATION_SMOOTHNESS*phase)+(PIXELS_PER_INGAME_UNIT-hp_image->w)/2,
                  y+(map_x-dirx[angle])*PIXELS_PER_INGAME_UNIT+dirx[angle]*(PIXELS_PER_INGAME_UNIT/ANIMATION_SMOOTHNESS*phase),
                  hp_image,_screen);
     if(stun_time!=0)
        {
         Apply_Texture(buff_effect_animation.Get_unit_animation()->Get_current_frame()*PIXELS_PER_INGAME_UNIT,0,
                       x+(map_y-diry[angle])*PIXELS_PER_INGAME_UNIT+diry[angle]*(PIXELS_PER_INGAME_UNIT/ANIMATION_SMOOTHNESS*phase),
                       y+(map_x-dirx[angle])*PIXELS_PER_INGAME_UNIT+dirx[angle]*(PIXELS_PER_INGAME_UNIT/ANIMATION_SMOOTHNESS*phase),
                       PIXELS_PER_INGAME_UNIT,PIXELS_PER_INGAME_UNIT,
                       buff_effect_animation.Get_image(),_screen);
        }
    }
 else
    {
     if(state==STATE_ATTACKING && Is_virus())
        {
         unit->Print(taking_damage,
                     animation.Get_current_frame(),
                     x+(map_y)*PIXELS_PER_INGAME_UNIT+diry[angle]*(PIXELS_PER_INGAME_UNIT/3/ANIMATION_SMOOTHNESS*(phase)),
                     y+(map_x)*PIXELS_PER_INGAME_UNIT+dirx[angle]*(PIXELS_PER_INGAME_UNIT/3/ANIMATION_SMOOTHNESS*(phase)),
                     angles[angle],state,_screen);
         Apply_Stretched_Texture(x+(map_y)*PIXELS_PER_INGAME_UNIT+diry[angle]*(PIXELS_PER_INGAME_UNIT/3/ANIMATION_SMOOTHNESS*(phase)),
                                 y+(map_x)*PIXELS_PER_INGAME_UNIT+dirx[angle]*(PIXELS_PER_INGAME_UNIT/3/ANIMATION_SMOOTHNESS*(phase)),
                                 PIXELS_PER_INGAME_UNIT*(hp-damage_taken)/hp,HP_HEIGHT,PLAYER_HP_IMAGE,_screen);
         Apply_Texture(x+(map_y)*PIXELS_PER_INGAME_UNIT+diry[angle]*(PIXELS_PER_INGAME_UNIT/3/ANIMATION_SMOOTHNESS*(phase))+(PIXELS_PER_INGAME_UNIT-hp_image->w)/2,
                       y+(map_x)*PIXELS_PER_INGAME_UNIT+dirx[angle]*(PIXELS_PER_INGAME_UNIT/3/ANIMATION_SMOOTHNESS*(phase)),
                       hp_image,_screen);
         if(stun_time!=0)
            {
             Apply_Texture(buff_effect_animation.Get_unit_animation()->Get_current_frame()*PIXELS_PER_INGAME_UNIT,0,
                           x+(map_y)*PIXELS_PER_INGAME_UNIT+diry[angle]*(PIXELS_PER_INGAME_UNIT/3/ANIMATION_SMOOTHNESS*(phase)),
                           y+(map_x)*PIXELS_PER_INGAME_UNIT+dirx[angle]*(PIXELS_PER_INGAME_UNIT/3/ANIMATION_SMOOTHNESS*(phase)),
                           PIXELS_PER_INGAME_UNIT,PIXELS_PER_INGAME_UNIT,
                           buff_effect_animation.Get_image(),_screen);
            }
        }
     else
        {
         unit->Print(taking_damage,
                     animation.Get_current_frame(),
                     x+map_y*PIXELS_PER_INGAME_UNIT,
                     y+map_x*PIXELS_PER_INGAME_UNIT,
                     angles[angle],state,_screen);
         Apply_Stretched_Texture(x+map_y*PIXELS_PER_INGAME_UNIT,
                                 y+map_x*PIXELS_PER_INGAME_UNIT,
                                 PIXELS_PER_INGAME_UNIT*(hp-damage_taken)/hp,HP_HEIGHT,PLAYER_HP_IMAGE,_screen);
         Apply_Texture(x+map_y*PIXELS_PER_INGAME_UNIT+(PIXELS_PER_INGAME_UNIT-hp_image->w)/2,
                       y+map_x*PIXELS_PER_INGAME_UNIT,
                       hp_image,_screen);
         if(stun_time!=0)
            {
             Apply_Texture(buff_effect_animation.Get_unit_animation()->Get_current_frame()*PIXELS_PER_INGAME_UNIT,0,
                           x+map_y*PIXELS_PER_INGAME_UNIT,
                           y+map_x*PIXELS_PER_INGAME_UNIT,
                           PIXELS_PER_INGAME_UNIT,PIXELS_PER_INGAME_UNIT,
                           buff_effect_animation.Get_image(),_screen);
            }
        }
    }

 if(stun_time!=0)
    {
     buff_effect_animation.Get_unit_animation()->Update_frame();
    }

 Update_phase();
}

void Field_unit::Update_phase()
{
 if(phase_timer.get_ticks()>(unit->Get_phase_change_delay()+SLOWED_TIME*Is_slowed()*(!Is_dead())))
    {
     phase++;
     if(phase>ANIMATION_SMOOTHNESS)
        phase=ANIMATION_SMOOTHNESS;
     phase_timer.start();
    }
}

void Field_unit::Clear()
{
 animation.Clear();
 Destroy_Texture(hp_image);
}

Field_unit::Field_unit()
{
 angle=0;
 phase=0;
 state=STATE_IDLE;
 map_x=map_y=0;
 special_effect_timer.start();
 phase_timer.start();
 state_timer.start();
}

void Field_unit::Set_map_pos(int x,int y)
{
 map_x=x;
 map_y=y;
 phase=0;
 phase_timer.start();
}

void Field_unit::Set_map_pos(std::pair<int,int> pos)
{
 Set_map_pos(pos.first,pos.second);
}

void Field_unit::Set_damage_taken(int _damage_taken)
{
 int hp;
 if(typeid(*unit)==typeid(Malware_defender))
    hp=unit->Get_health()+unit->Get_shield_health();
 else
    hp=unit->Get_health();
 damage_taken=std::min(_damage_taken,hp);
 char aux[TEXT_LENGTH_MAX]={NULL},aux1[TEXT_LENGTH_MAX]={NULL};
 itoa(hp-damage_taken,aux1);
 strcat(aux,aux1);
 strcat(aux," / ");
 itoa(hp,aux1);
 strcat(aux,aux1);
 Destroy_Texture(hp_image);
 hp_image=Create_TTF_Texture(MENU_FONT_SMALL,aux,PLAYER_HP_COLOR);
}

void Field_unit::Take_damage(int _damage)
{
 if(typeid(*unit)!=typeid(Virus_cloud) && typeid(*unit)!=typeid(Security_service))
    {
     taking_damage=true;
     taking_damage_timer.start();
     animation=unit->Get_animation(STATE_TAKING_DAMAGE);
    }
 Set_damage_taken(std::max(0,damage_taken+_damage));
}

void Field_unit::Set_unit(Combat_unit *_unit)
{
 unit=_unit;
 animation=unit->Get_animation(state);
}

void Field_unit::Set_angle(int _angle)
{
 angle=_angle;
}

void Field_unit::Set_state(int _state)
{
 if(state!=_state)
    {
     phase=0;
     animation=unit->Get_animation(_state);
     state_timer.start();
    }
 state=_state;
}

std::pair<int,int> Field_unit::Get_map_pos()
{
 return std::make_pair(map_x,map_y);
}

Combat_unit *Field_unit::Get_combat_unit()
{
 return unit;
}

int Field_unit::Get_phase()
{
 return phase;
}

int Field_unit::Get_state()
{
 return state;
}

bool Field_unit::Is_dead()
{
 return damage_taken>=unit->Get_health();
}

bool Field_unit::Phase_finished()
{
 if(state!=STATE_ATTACKING)
    return phase==ANIMATION_SMOOTHNESS;
 else
    if(state_timer.get_ticks()>animation.Get_total_duration())
       {
        state_timer.start();
        return true;
       }
 return false;
}

bool Field_unit::Is_firewall()
{
 return (typeid(*unit)==typeid(Trap) || typeid(*unit)==typeid(Firewall_plus) || typeid(*unit)==typeid(Antivirus_scanner) ||
         typeid(*unit)==typeid(Security_service) || typeid(*unit)==typeid(Healer) || typeid(*unit)==typeid(Slow_Tower));
}

bool Field_unit::Is_virus()
{
 return !Is_firewall();
}

bool Field_unit::Triggered_special_effect()
{
 if(special_effect_timer.get_ticks()>unit->Get_attack_delay())
    {
     special_effect_timer.start();
     return true;
    }
 return false;
}

void Field_unit::Update_frame()
{
 if(taking_damage && taking_damage_timer.get_ticks()>TAKING_DAMAGE_DURATION)
    {
     taking_damage=false;
     animation=unit->Get_animation(state);
    }
 animation.Update_frame();
}

bool Field_unit::Special_effect_finished(int duration)
{
 return special_effect_duration_timer.get_ticks()>duration;
}

void Field_unit::Start_special_effect_timer()
{
 special_effect_duration_timer.start();
}

bool Field_unit::Ready_to_spawn()
{
 if(!spawn_timer.is_started())
    return true;
 return spawn_timer.get_ticks()>unit->Get_spawn_delay();
}

void Field_unit::Start_spawn_timer()
{
 spawn_timer.start();
}

bool Field_unit::Is_triggered()
{
 return triggered;
}

void Field_unit::Trigger()
{
 triggered=true;
}

void Field_unit::Stun(int _stun_time)
{
 buff_effect_animation=UNIT_STUNNED_ANIMATION;
 stun_time=_stun_time;
 stun_timer.start();
}

bool Field_unit::Is_stunned()
{
 if(stun_time==0)
    return false;
 int sq=stun_timer.get_ticks();
 if(sq>stun_time)
    {
     stun_time=0;
    }
 return (stun_time!=0);
}

void Field_unit::Slow(int _slow_time)
{
 slow_time=_slow_time;
 slow_timer.start();
}

bool Field_unit::Is_slowed()
{
 if(slow_time==0)
    return false;
 int sq=slow_timer.get_ticks();
 if(sq>slow_time)
    {
     slow_time=0;
    }
 return (slow_time!=0);
}
