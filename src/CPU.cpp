#include "CPU.h"

char *PATH_TO_CPU_IMAGE={"res/images/CPU.png"};

void CPU::Load()
{
 _image=Load_Transparent_Texture(PATH_TO_CPU_IMAGE);
}

void CPU::Clear()
{
 health=0;
 Destroy_Texture(_image);
 _image=NULL;
 Destroy_Texture(health_image);
 health_image=NULL;
}

void CPU::Set_map_pos(int x,int y)
{
 map_x=x;
 map_y=y;
}

void CPU::Set_health(int _health)
{
 Destroy_Texture(health_image);
 health_image=NULL;
 health=_health;
 char aux[TEXT_LENGTH_MAX];
 itoa(health,aux);
 health_image=Create_TTF_Texture(MENU_FONT_SMALL,aux,CPU_HP_COLOR);
}

int CPU::Get_health()
{
 return health;
}

void CPU::Print(int x,int y,Texture *_screen)
{
 Apply_Texture(x+map_y*PIXELS_PER_INGAME_UNIT,y+map_x*PIXELS_PER_INGAME_UNIT,_image,_screen);
 Apply_Texture(x+map_y*PIXELS_PER_INGAME_UNIT+(_image->w-health_image->w)/2,y+map_x*PIXELS_PER_INGAME_UNIT+(_image->h-health_image->h)/2,health_image,_screen);
}

bool CPU::Is_in_range(int x,int y)
{
 return (x>=map_x && x<=map_x+_image->w/PIXELS_PER_INGAME_UNIT-1 && y>=map_y && y<=map_y+_image->h/PIXELS_PER_INGAME_UNIT-1);
}

bool CPU::Is_in_range(std::pair<int,int> _pos)
{
 return Is_in_range(_pos.first,_pos.second);
}
