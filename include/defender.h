#ifndef DEFENDER_H
#define DEFENDER_H

#include <typeinfo>

#include "settings.h"
#include "player.h"
#include "firewall.h"
#include "antivirus_scanner.h"
#include "firewall_plus.h"
#include "security_service.h"
#include "trap.h"
#include "healer.h"

const int FIREWALL_TYPES_CONFIGS=3;

class Defender: public Player<Firewall>
{
 private:
 std::pair<int,int> cursor_pos_on_screen;
 std::pair<int,int> cursor_pos={-1,-1};
 bool **available_cursor_positions[FIREWALL_TYPES_CONFIGS];
 int unit_cursor_pos=0;
 int arena_size;

 public:
 Defender(int _arena_size);
 ~Defender();
 void Clear_available_positions();
 int Get_type(char *type);
 void Load(int _id);
 void Reset();
 virtual void Clear();
 virtual bool Can_cast(int _id);
 Firewall *Get_firewall(int _id);
 std::pair<int,int> Get_cursor_position();
 void Set_available_cursor_position(int type,std::pair<int,int> _pos,bool _val);
 virtual int Handle_Events(int x,int y,SDL_Event *event);
 virtual void Print_info(int x,int y,Texture *_screen);
 void Print_available_pos();
 int Get_current_firewall_type();
};

int Get_firewall_type(Combat_unit *fw);

#endif // DEFENDER_H
