#ifndef DEFENDER_H
#define DEFENDER_H

#include "settings.h"
#include "player.h"
#include "firewall.h"
#include "antivirus_scanner.h"
#include "firewall_plus.h"
#include "security_service.h"

const int MAXIMUM_RAM=1<<30;

class Defender: public Player<Firewall>
{
 private:
 int used_ram=0,total_ram=INITIAL_TOTAL_RAM;
 Texture *ram_image=NULL;
 std::pair<int,int> cursor_pos_on_screen;
 std::pair<int,int> cursor_pos={-1,-1};
 bool available_cursor_positions[ARENA_SIZE][ARENA_SIZE];
 int unit_cursor_pos=0;

 public:
 Defender();
 void Clear_available_positions();
 int Get_type(char *type);
 void Load(int _id);
 void Reset();
 virtual void Clear();
 virtual bool Can_cast(int _id);
 Firewall *Get_firewall(int _id);
 std::pair<int,int> Get_cursor_position();
 void Set_available_cursor_position(std::pair<int,int> _pos,bool _val);
 virtual int Handle_Events(int x,int y,SDL_Event *event);
 void Set_used_ram(int _used_ram);
 void Set_total_ram(int _total_ram);
 void Add_to_total_ram(int _ram);
 void Update_ram_image();
 virtual void Print_info(int x,int y,Texture *_screen);
 void Print_available_pos();
};

#endif // DEFENDER_H
