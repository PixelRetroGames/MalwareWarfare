#ifndef LEVEL_H
#define LEVEL_H

#include "texture.h"
#include "map.h"
#include "attacker.h"
#include "defender.h"
#include "field_unit.h"
#include "CPU.h"
#include "effect_manager.h"
#include <vector>
#include <map>
#include <queue>

class Level
{
 private:
 Map arena;
 Attacker *attacker;
 Defender *defender;
 CPU cpu;
 std::map<int,Field_unit> units;
 std::vector<int> units_ids;
 std::map<std::pair<int,int>,int> defense_units_on_lane;
 std::map<std::pair<int,int>,int> glitch_id;
 int **unit_is_placed;
 int arena_size;
 Effect_Manager effect_manager;
 Timer game_timer;
 Mix_Music *music;
 Texture *arena_buffer;

 public:
 void Load(char *filename);
 void Start(Texture *_screen,char *filename);
 void Print_units(int x,int y,Texture *_screen);
 void Print_timer(int x,int y,Texture *_screen);
 void Print(Texture *_screen);
 void Remove_unit(int pos);
 void Move_unit(int i,int x,int y);
 void Move_units();
 bool Check_unit_fight(int id);
 void Units_fight(int virus_id,int firewall_id,bool virus_attacked);
 void Unit_trigger_death_effect(int _pos);
 void Unit_trigger_special_effect(int _pos);
 void Update_frames();
 void Add_virus(std::pair<int,int> pos,int virus_id);
 void Handle_Events(SDL_Event *event);
 void Clear();

 void Finish_screen(bool attacker_won,Texture *_screen);
 void Print_finish_screen(bool attacker_won,Texture *_screen);
};

#endif // LEVEL_H
